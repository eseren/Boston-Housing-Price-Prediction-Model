{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16KurWLLrQukmSKmRn1RRulo3XOEtBufC","timestamp":1691514768370}],"mount_file_id":"16KurWLLrQukmSKmRn1RRulo3XOEtBufC","authorship_tag":"ABX9TyNAxFbXhHL3XLmPBXCQtPXF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"dqa-B4dDKCGe"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["# load data\n","boston = pd.read_csv('/content/drive/MyDrive/Materi Day 18/boston.csv')\n","boston.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"H5gzUmdROv_3","executionInfo":{"status":"ok","timestamp":1677972440388,"user_tz":-420,"elapsed":656,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"e21d6eb7-3342-453a-ce81-ffd226546ff6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n","0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n","1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n","2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n","3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n","4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n","\n","    black  lstat  medv  \n","0  396.90   4.98  24.0  \n","1  396.90   9.14  21.6  \n","2  392.83   4.03  34.7  \n","3  394.63   2.94  33.4  \n","4  396.90   5.33  36.2  "],"text/html":["\n","  <div id=\"df-33fb0393-8143-41c1-a7df-52cce0141202\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>crim</th>\n","      <th>zn</th>\n","      <th>indus</th>\n","      <th>chas</th>\n","      <th>nox</th>\n","      <th>rm</th>\n","      <th>age</th>\n","      <th>dis</th>\n","      <th>rad</th>\n","      <th>tax</th>\n","      <th>ptratio</th>\n","      <th>black</th>\n","      <th>lstat</th>\n","      <th>medv</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.00632</td>\n","      <td>18.0</td>\n","      <td>2.31</td>\n","      <td>0</td>\n","      <td>0.538</td>\n","      <td>6.575</td>\n","      <td>65.2</td>\n","      <td>4.0900</td>\n","      <td>1</td>\n","      <td>296</td>\n","      <td>15.3</td>\n","      <td>396.90</td>\n","      <td>4.98</td>\n","      <td>24.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.02731</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0</td>\n","      <td>0.469</td>\n","      <td>6.421</td>\n","      <td>78.9</td>\n","      <td>4.9671</td>\n","      <td>2</td>\n","      <td>242</td>\n","      <td>17.8</td>\n","      <td>396.90</td>\n","      <td>9.14</td>\n","      <td>21.6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.02729</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0</td>\n","      <td>0.469</td>\n","      <td>7.185</td>\n","      <td>61.1</td>\n","      <td>4.9671</td>\n","      <td>2</td>\n","      <td>242</td>\n","      <td>17.8</td>\n","      <td>392.83</td>\n","      <td>4.03</td>\n","      <td>34.7</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.03237</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0</td>\n","      <td>0.458</td>\n","      <td>6.998</td>\n","      <td>45.8</td>\n","      <td>6.0622</td>\n","      <td>3</td>\n","      <td>222</td>\n","      <td>18.7</td>\n","      <td>394.63</td>\n","      <td>2.94</td>\n","      <td>33.4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.06905</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0</td>\n","      <td>0.458</td>\n","      <td>7.147</td>\n","      <td>54.2</td>\n","      <td>6.0622</td>\n","      <td>3</td>\n","      <td>222</td>\n","      <td>18.7</td>\n","      <td>396.90</td>\n","      <td>5.33</td>\n","      <td>36.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33fb0393-8143-41c1-a7df-52cce0141202')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-33fb0393-8143-41c1-a7df-52cce0141202 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-33fb0393-8143-41c1-a7df-52cce0141202');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":[" ## Check null and duplicates"],"metadata":{"id":"ry57fHgYUyOj"}},{"cell_type":"code","source":["boston.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rqxppxvK2eda","executionInfo":{"status":"ok","timestamp":1677972440798,"user_tz":-420,"elapsed":418,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"14eb44d6-c764-40b0-a939-f8f430a33e2f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 506 entries, 0 to 505\n","Data columns (total 14 columns):\n"," #   Column   Non-Null Count  Dtype  \n","---  ------   --------------  -----  \n"," 0   crim     506 non-null    float64\n"," 1   zn       506 non-null    float64\n"," 2   indus    506 non-null    float64\n"," 3   chas     506 non-null    int64  \n"," 4   nox      506 non-null    float64\n"," 5   rm       506 non-null    float64\n"," 6   age      506 non-null    float64\n"," 7   dis      506 non-null    float64\n"," 8   rad      506 non-null    int64  \n"," 9   tax      506 non-null    int64  \n"," 10  ptratio  506 non-null    float64\n"," 11  black    506 non-null    float64\n"," 12  lstat    506 non-null    float64\n"," 13  medv     506 non-null    float64\n","dtypes: float64(11), int64(3)\n","memory usage: 55.5 KB\n"]}]},{"cell_type":"code","source":["boston.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fUB3ZlOGD22Q","executionInfo":{"status":"ok","timestamp":1677972440800,"user_tz":-420,"elapsed":15,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"b5745a52-c060-4fc1-9ac1-b6c16a23b85f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["Data clearing is done ! no null data and there is no duplicates"],"metadata":{"id":"gwemZOS3Jvtw"}},{"cell_type":"code","source":["# split train test\n","from sklearn.model_selection import train_test_split\n","\n","feature = boston.drop(columns='medv')\n","target = boston[['medv']]\n","\n","feature_boston_train, feature_boston_test, target_boston_train, target_boston_test = train_test_split(feature, target, test_size=0.20, random_state=42)"],"metadata":{"id":"PUI-YQbmO4qb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# calculate VIF scores\n","from statsmodels.stats.outliers_influence import variance_inflation_factor as vif\n","from statsmodels.tools.tools import add_constant\n","\n","X = add_constant(feature_boston_train)\n","\n","vif_df = pd.DataFrame([vif(X.values, i)\n","               for i in range(X.shape[1])],\n","              index=X.columns).reset_index()\n","vif_df.columns = ['feature','vif_score']\n","vif_df = vif_df.loc[vif_df.feature!='const']\n","vif_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"RD_eZMA0QiAV","executionInfo":{"status":"ok","timestamp":1677972442318,"user_tz":-420,"elapsed":651,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"722dac06-4975-400d-f673-0e4530c44618"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    feature  vif_score\n","1      crim   1.713187\n","2        zn   2.465631\n","3     indus   3.877855\n","4      chas   1.096674\n","5       nox   4.469150\n","6        rm   1.947809\n","7       age   2.989948\n","8       dis   4.168578\n","9       rad   7.658316\n","10      tax   8.943301\n","11  ptratio   1.851448\n","12    black   1.325121\n","13    lstat   2.818045"],"text/html":["\n","  <div id=\"df-59bfadd8-d8f2-4d92-a3b9-2f7791234796\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>vif_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>crim</td>\n","      <td>1.713187</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>zn</td>\n","      <td>2.465631</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>indus</td>\n","      <td>3.877855</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>chas</td>\n","      <td>1.096674</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>nox</td>\n","      <td>4.469150</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>rm</td>\n","      <td>1.947809</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>age</td>\n","      <td>2.989948</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>dis</td>\n","      <td>4.168578</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>rad</td>\n","      <td>7.658316</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>tax</td>\n","      <td>8.943301</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>ptratio</td>\n","      <td>1.851448</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>black</td>\n","      <td>1.325121</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>lstat</td>\n","      <td>2.818045</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59bfadd8-d8f2-4d92-a3b9-2f7791234796')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-59bfadd8-d8f2-4d92-a3b9-2f7791234796 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-59bfadd8-d8f2-4d92-a3b9-2f7791234796');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["There are several features with high VIF scores:\n","1. `nox`\n","2. `dis`\n","3. `rad`\n","4. `tax`"],"metadata":{"id":"qcXhx68PQxkg"}},{"cell_type":"code","source":["# heatmap correlation\n","boston_train = pd.concat([feature_boston_train, target_boston_train], axis=1)\n","corr = boston_train.corr()\n","\n","plt.figure(figsize=(10,7))\n","sns.heatmap(corr, annot=True, fmt='.2f')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":432},"id":"8qigxkhkRBf7","executionInfo":{"status":"ok","timestamp":1677972446601,"user_tz":-420,"elapsed":4292,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"54ec5996-9288-4bc7-bde9-d89dc5eac64b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["We will see how the correlation between features that have VIF > 4, either against the target variable or with fellow features. Also, look at the correlation with other features. In the heatmap above, the correlation is considered high if it has a value > 0.7.\n","\n","After noticing, among the 4 features with VIF > 4, `tax` has the highest correlation with the target variable, so we will keep `tax`. Another feature that has high correlation with other features is `indus`. `indus` has high correlation with `tax`, `dis`, and `nox`, so `indus` will be dropped.\n","\n","We choose to retain `tax` and `dis`. Therefore, we need to drop:\n","\n","* `indus`\n","* `nox`\n","* `rad`"],"metadata":{"id":"O8jXbkBxvlLA"}},{"cell_type":"code","source":["# drop redundant features\n","feature_boston_train = feature_boston_train.drop(columns=['indus','nox','rad'])\n","feature_boston_test = feature_boston_test.drop(columns=['indus','nox','rad'])"],"metadata":{"id":"ohiivyLSMkBq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Recheck VIF\n","\n"],"metadata":{"id":"STklzfexPtOG"}},{"cell_type":"code","source":["from statsmodels.stats.outliers_influence import variance_inflation_factor as vif\n","from statsmodels.tools.tools import add_constant\n","\n","X = add_constant(feature_boston_train)\n","\n","vif_df = pd.DataFrame([vif(X.values, i)\n","               for i in range(X.shape[1])],\n","              index=X.columns).reset_index()\n","vif_df.columns = ['feature','vif_score']\n","vif_df = vif_df.loc[vif_df.feature!='const']\n","vif_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"HB2llntBPg_c","executionInfo":{"status":"ok","timestamp":1677972446609,"user_tz":-420,"elapsed":48,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"24c8a45e-d946-4387-cc76-411061d8194d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    feature  vif_score\n","1      crim   1.575252\n","2        zn   2.363346\n","3      chas   1.062361\n","4        rm   1.798318\n","5       age   2.780238\n","6       dis   3.586339\n","7       tax   2.381965\n","8   ptratio   1.578882\n","9     black   1.308853\n","10    lstat   2.742745"],"text/html":["\n","  <div id=\"df-7590b589-5e4b-4d8e-9b49-98e2fcd78e97\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>vif_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>crim</td>\n","      <td>1.575252</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>zn</td>\n","      <td>2.363346</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>chas</td>\n","      <td>1.062361</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>rm</td>\n","      <td>1.798318</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>age</td>\n","      <td>2.780238</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>dis</td>\n","      <td>3.586339</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>tax</td>\n","      <td>2.381965</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>ptratio</td>\n","      <td>1.578882</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>black</td>\n","      <td>1.308853</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>lstat</td>\n","      <td>2.742745</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7590b589-5e4b-4d8e-9b49-98e2fcd78e97')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7590b589-5e4b-4d8e-9b49-98e2fcd78e97 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7590b589-5e4b-4d8e-9b49-98e2fcd78e97');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["No VIF > 4, Good !"],"metadata":{"id":"q_P5sF1tP-u3"}},{"cell_type":"markdown","source":["# Model Training\n","### Ridge Regression"],"metadata":{"id":"VCuvqP_YJ6oi"}},{"cell_type":"code","source":["from sklearn.linear_model import Ridge\n","\n","# train the model\n","X_admit_train = feature_boston_train.to_numpy()\n","y_admit_train = target_boston_train.to_numpy()\n","y_admit_train = y_admit_train.reshape(len(y_admit_train),)\n","\n","# define the model\n","ridge_reg = Ridge(alpha=0.1,\n","                  random_state=42)\n","\n","ridge_reg.fit(X_admit_train, y_admit_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"gV8JYDflEQ2k","executionInfo":{"status":"ok","timestamp":1677972447329,"user_tz":-420,"elapsed":765,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"44ffaebf-4476-41ea-f024-f81a3edc2736"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Ridge(alpha=0.1, random_state=42)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge(alpha=0.1, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.1, random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# retrieve the coefficients\n","# show as a nice dataframe\n","\n","data = feature_boston_train\n","model = ridge_reg\n","\n","coef_df = pd.DataFrame({\n","    'feature':['intercept'] + data.columns.tolist(),\n","    'coefficient':[model.intercept_] + list(model.coef_)\n","})\n","\n","coef_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"AHk2KYmFKcsg","executionInfo":{"status":"ok","timestamp":1677972447331,"user_tz":-420,"elapsed":110,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"d2357e73-f942-4fc8-a922-53bd60f7e4b3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      feature  coefficient\n","0   intercept    12.471125\n","1        crim    -0.072642\n","2          zn     0.029370\n","3        chas     2.665203\n","4          rm     4.934213\n","5         age    -0.023974\n","6         dis    -1.134713\n","7         tax    -0.003351\n","8     ptratio    -0.636844\n","9       black     0.012525\n","10      lstat    -0.528613"],"text/html":["\n","  <div id=\"df-b5eadf9c-a1e9-47de-8af2-7b177f576329\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>coefficient</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>intercept</td>\n","      <td>12.471125</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>crim</td>\n","      <td>-0.072642</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>zn</td>\n","      <td>0.029370</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>chas</td>\n","      <td>2.665203</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>rm</td>\n","      <td>4.934213</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>age</td>\n","      <td>-0.023974</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>dis</td>\n","      <td>-1.134713</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>tax</td>\n","      <td>-0.003351</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>ptratio</td>\n","      <td>-0.636844</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>black</td>\n","      <td>0.012525</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>lstat</td>\n","      <td>-0.528613</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5eadf9c-a1e9-47de-8af2-7b177f576329')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b5eadf9c-a1e9-47de-8af2-7b177f576329 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b5eadf9c-a1e9-47de-8af2-7b177f576329');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["### Lasso"],"metadata":{"id":"JQ82mch4KkTY"}},{"cell_type":"code","source":["from sklearn.linear_model import Lasso\n","\n","# define the model\n","lasso_reg = Lasso(alpha=0.1,\n","                  random_state=42)\n","\n","lasso_reg.fit(X_admit_train, y_admit_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"VdcynQsJKjNR","executionInfo":{"status":"ok","timestamp":1677972447332,"user_tz":-420,"elapsed":109,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"7bb6836a-44ca-496b-cd53-76313f170e63"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Lasso(alpha=0.1, random_state=42)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(alpha=0.1, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=0.1, random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# retrieve the coefficients\n","# show as a nice dataframe\n","\n","data = feature_boston_train\n","model = lasso_reg\n","\n","coef_df = pd.DataFrame({\n","    'feature':['intercept'] + data.columns.tolist(),\n","    'coefficient':[model.intercept_] + list(model.coef_)\n","})\n","\n","coef_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"YqEkehEcKrbp","executionInfo":{"status":"ok","timestamp":1677972447333,"user_tz":-420,"elapsed":107,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"1e1735ea-9a76-4c1b-a7f8-5d95248241c5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      feature  coefficient\n","0   intercept    14.388124\n","1        crim    -0.072414\n","2          zn     0.028873\n","3        chas     1.167327\n","4          rm     4.655845\n","5         age    -0.018457\n","6         dis    -1.098853\n","7         tax    -0.003180\n","8     ptratio    -0.652789\n","9       black     0.012522\n","10      lstat    -0.555673"],"text/html":["\n","  <div id=\"df-f2017c95-84a5-489f-9511-5375b06d483d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>coefficient</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>intercept</td>\n","      <td>14.388124</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>crim</td>\n","      <td>-0.072414</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>zn</td>\n","      <td>0.028873</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>chas</td>\n","      <td>1.167327</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>rm</td>\n","      <td>4.655845</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>age</td>\n","      <td>-0.018457</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>dis</td>\n","      <td>-1.098853</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>tax</td>\n","      <td>-0.003180</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>ptratio</td>\n","      <td>-0.652789</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>black</td>\n","      <td>0.012522</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>lstat</td>\n","      <td>-0.555673</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2017c95-84a5-489f-9511-5375b06d483d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f2017c95-84a5-489f-9511-5375b06d483d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f2017c95-84a5-489f-9511-5375b06d483d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["# Choosing the best lambda\n","### Split data: train-validation-test"],"metadata":{"id":"7pGoEKNUK3xJ"}},{"cell_type":"code","source":["# split train test\n","from sklearn.model_selection import train_test_split\n","\n","feature = boston.drop(columns='medv')\n","target = boston[['medv']]\n","\n","# First splitting: pretrain and test\n","feature_boston_pretrain, feature_boston_test, target_boston_pretrain, target_boston_test = train_test_split(feature, target, test_size=0.20, random_state=42)\n","\n","# Second splitting: train and validation\n","feature_boston_train, feature_boston_validation, target_boston_train, target_boston_validation = train_test_split(feature_boston_pretrain, target_boston_pretrain, test_size=0.20, random_state=42)"],"metadata":{"id":"YCbo5ET0K0ZW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Drop Multicollinear Features"],"metadata":{"id":"eaTGc16rLYI5"}},{"cell_type":"code","source":["feature_boston_train = feature_boston_train.drop(columns=['indus','nox','rad'])\n","feature_boston_validation = feature_boston_validation.drop(columns=['indus','nox','rad'])\n","feature_boston_test = feature_boston_test.drop(columns=['indus','nox','rad'])"],"metadata":{"id":"M-VyxOJ6LXH6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train Multiple Models\n","\n","with different alpha (lambda)"],"metadata":{"id":"tAVUh9cD-5-m"}},{"cell_type":"code","source":["from sklearn.linear_model import Ridge\n","\n","# train the model\n","X_admit_train = feature_boston_train.to_numpy()\n","y_admit_train = target_boston_train.to_numpy()\n","y_admit_train = y_admit_train.reshape(len(y_admit_train),)\n","\n","# define the model\n","# 4 models with 4 different alphas (lambda)\n","ridge_reg_pointzeroone = Ridge(alpha=0.01, random_state=42)\n","ridge_reg_pointone = Ridge(alpha=0.1, random_state=42)\n","ridge_reg_one = Ridge(alpha=1, random_state=42)\n","ridge_reg_ten = Ridge(alpha=10, random_state=42)\n","\n","# fit the model (training)\n","ridge_reg_pointzeroone.fit(X_admit_train, y_admit_train)\n","ridge_reg_pointone.fit(X_admit_train, y_admit_train)\n","ridge_reg_one.fit(X_admit_train, y_admit_train)\n","ridge_reg_ten.fit(X_admit_train, y_admit_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"KooeuK9Z4Kll","executionInfo":{"status":"ok","timestamp":1677972447338,"user_tz":-420,"elapsed":107,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"3eb0321a-69f7-42a3-b985-3db271742d05"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Ridge(alpha=10, random_state=42)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge(alpha=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=10, random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["## Find The Best Model (aplha)\n","\n","Based on validation set"],"metadata":{"id":"-H7SEPRh_WAX"}},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","\n","X_admit_validation = feature_boston_validation.to_numpy()\n","y_admit_validation = target_boston_validation.to_numpy()\n","y_admit_validation = y_admit_validation.reshape(len(y_admit_validation),)\n","\n","alphas = [0.01, 0.1, 1., 10]\n","models = [ridge_reg_pointzeroone,\n","          ridge_reg_pointone,\n","          ridge_reg_one,\n","          ridge_reg_ten]\n","\n","for model, alpha in zip(models, alphas):\n","    y_predict_validation = model.predict(X_admit_validation)\n","    rmse = np.sqrt(mean_squared_error(y_admit_validation,y_predict_validation))\n","    print(f'RMSE of Ridge regression model with alpha = {alpha} is {rmse}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89VMZIcp_UZX","executionInfo":{"status":"ok","timestamp":1677972447339,"user_tz":-420,"elapsed":105,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"1678cf25-ab44-4b7b-9566-025b4bda8204"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE of Ridge regression model with alpha = 0.01 is 4.942902753902186\n","RMSE of Ridge regression model with alpha = 0.1 is 4.942253549107176\n","RMSE of Ridge regression model with alpha = 1.0 is 4.935974627701106\n","RMSE of Ridge regression model with alpha = 10 is 4.888440181099671\n"]}]},{"cell_type":"markdown","source":["We can see that Ridge with alpha = 10 has the smallest RMSE --> The best model"],"metadata":{"id":"1MCqhUOxEhlZ"}},{"cell_type":"markdown","source":["## Coefficient"],"metadata":{"id":"bS5fd4PQEqxy"}},{"cell_type":"code","source":["ridge_best = ridge_reg_ten\n","\n","coef_df = pd.DataFrame({\n","    'feature':['intercept'] + feature_boston_train.columns.tolist(),\n","    'coefficient':[ridge_best.intercept_] + list(ridge_best.coef_)\n","})\n","\n","coef_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"NyF9vokVEn4T","executionInfo":{"status":"ok","timestamp":1677972447341,"user_tz":-420,"elapsed":97,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"7dff8fbb-1107-4711-96e8-ebb904a05e32"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      feature  coefficient\n","0   intercept    12.875802\n","1        crim    -0.066220\n","2          zn     0.034787\n","3        chas     1.841424\n","4          rm     4.885661\n","5         age    -0.014556\n","6         dis    -1.153516\n","7         tax    -0.003419\n","8     ptratio    -0.679689\n","9       black     0.012965\n","10      lstat    -0.535040"],"text/html":["\n","  <div id=\"df-97a11e94-fa64-4760-8d46-4c13217f32b9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>coefficient</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>intercept</td>\n","      <td>12.875802</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>crim</td>\n","      <td>-0.066220</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>zn</td>\n","      <td>0.034787</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>chas</td>\n","      <td>1.841424</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>rm</td>\n","      <td>4.885661</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>age</td>\n","      <td>-0.014556</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>dis</td>\n","      <td>-1.153516</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>tax</td>\n","      <td>-0.003419</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>ptratio</td>\n","      <td>-0.679689</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>black</td>\n","      <td>0.012965</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>lstat</td>\n","      <td>-0.535040</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97a11e94-fa64-4760-8d46-4c13217f32b9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-97a11e94-fa64-4760-8d46-4c13217f32b9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-97a11e94-fa64-4760-8d46-4c13217f32b9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["## Lasso"],"metadata":{"id":"Cwr1gbYOE1Py"}},{"cell_type":"code","source":["from sklearn.linear_model import Lasso\n","\n","# train the model\n","X_admit_train = feature_boston_train.to_numpy()\n","y_admit_train = target_boston_train.to_numpy()\n","y_admit_train = y_admit_train.reshape(len(y_admit_train),)\n","\n","# define the model\n","# 4 models with 4 different alphas (lambda)\n","Lasso_reg_pointzeroone = Lasso(alpha=0.01, random_state=42)\n","Lasso_reg_pointone = Lasso(alpha=0.1, random_state=42)\n","Lasso_reg_one = Lasso(alpha=1, random_state=42)\n","Lasso_reg_ten = Lasso(alpha=10, random_state=42)\n","\n","# fit the model (training)\n","Lasso_reg_pointzeroone.fit(X_admit_train, y_admit_train)\n","Lasso_reg_pointone.fit(X_admit_train, y_admit_train)\n","Lasso_reg_one.fit(X_admit_train, y_admit_train)\n","Lasso_reg_ten.fit(X_admit_train, y_admit_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"Kdh2c4VtAh6A","executionInfo":{"status":"ok","timestamp":1677972447342,"user_tz":-420,"elapsed":95,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"472748ed-5eed-478b-8306-a37bd3c248d1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Lasso(alpha=10, random_state=42)"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(alpha=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=10, random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","\n","X_admit_validation = feature_boston_validation.to_numpy()\n","y_admit_validation = target_boston_validation.to_numpy()\n","y_admit_validation = y_admit_validation.reshape(len(y_admit_validation),)\n","\n","alphas = [0.01, 0.1, 1., 10]\n","models = [Lasso_reg_pointzeroone,\n","          Lasso_reg_pointone,\n","          Lasso_reg_one,\n","          Lasso_reg_ten]\n","\n","for model, alpha in zip(models, alphas):\n","    y_predict_validation = model.predict(X_admit_validation)\n","    rmse = np.sqrt(mean_squared_error(y_admit_validation,y_predict_validation))\n","    print(f'RMSE of Lasso regression model with alpha = {alpha} is {rmse}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FAbH6u6FFDTu","executionInfo":{"status":"ok","timestamp":1677972447343,"user_tz":-420,"elapsed":92,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"63376b92-be20-4bf9-a018-9ebfe5f7112c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE of Lasso regression model with alpha = 0.01 is 4.9388903773734505\n","RMSE of Lasso regression model with alpha = 0.1 is 4.916653623804469\n","RMSE of Lasso regression model with alpha = 1.0 is 4.845855861263994\n","RMSE of Lasso regression model with alpha = 10 is 5.426630826265111\n"]}]},{"cell_type":"markdown","source":["We can see that Lasso with alpha = 1 has the smallest RMSE --> The best model"],"metadata":{"id":"ESyvp54xKtKz"}},{"cell_type":"markdown","source":["## Find the best model (alpha)\n","\n","Based on validation data"],"metadata":{"id":"2nKtFvs_Fd2d"}},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","\n","X_admit_validation = feature_boston_validation.to_numpy()\n","y_admit_validation = target_boston_validation.to_numpy()\n","y_admit_validation = y_admit_validation.reshape(len(y_admit_validation),)"],"metadata":{"id":"MVEPYJCYFNEU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Lasso_best = Lasso_reg_one\n","\n","coef_df = pd.DataFrame({\n","    'feature':['intercept'] + feature_boston_train.columns.tolist(),\n","    'coefficient':[Lasso_best.intercept_] + list(Lasso_best.coef_)\n","})\n","\n","coef_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"n_eHIziSFyN-","executionInfo":{"status":"ok","timestamp":1677972447347,"user_tz":-420,"elapsed":89,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"10bbf056-3a40-40ac-8580-d90f661b6783"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      feature  coefficient\n","0   intercept    25.823535\n","1        crim    -0.041070\n","2          zn     0.025267\n","3        chas     0.000000\n","4          rm     2.504144\n","5         age     0.022054\n","6         dis    -0.599318\n","7         tax    -0.002994\n","8     ptratio    -0.666247\n","9       black     0.011401\n","10      lstat    -0.712430"],"text/html":["\n","  <div id=\"df-351b54ae-ada8-40b8-89a7-41dc8ff6f58e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature</th>\n","      <th>coefficient</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>intercept</td>\n","      <td>25.823535</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>crim</td>\n","      <td>-0.041070</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>zn</td>\n","      <td>0.025267</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>chas</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>rm</td>\n","      <td>2.504144</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>age</td>\n","      <td>0.022054</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>dis</td>\n","      <td>-0.599318</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>tax</td>\n","      <td>-0.002994</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>ptratio</td>\n","      <td>-0.666247</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>black</td>\n","      <td>0.011401</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>lstat</td>\n","      <td>-0.712430</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-351b54ae-ada8-40b8-89a7-41dc8ff6f58e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-351b54ae-ada8-40b8-89a7-41dc8ff6f58e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-351b54ae-ada8-40b8-89a7-41dc8ff6f58e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["## Diagnostic Study"],"metadata":{"id":"lrytW1M6cgNh"}},{"cell_type":"code","source":["from sklearn.metrics import r2_score\n","\n","y_predict_train = ridge_best.predict(X_admit_train)\n","\n","print('R-squared for training data is {}'.format(r2_score(y_admit_train, y_predict_train)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XtaJ4W9BcjVO","executionInfo":{"status":"ok","timestamp":1677972447349,"user_tz":-420,"elapsed":88,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"fb29e2e6-2816-434a-f697-1179ddf97ed1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared for training data is 0.746036188189175\n"]}]},{"cell_type":"markdown","source":["74% of the variability of the target variable has been successfully modelled with the existing features."],"metadata":{"id":"wRnGyFCtgK1x"}},{"cell_type":"code","source":["# calculate residuals\n","residual = y_admit_train - y_predict_train\n","\n","# prepare dataframe\n","# 1 predictor --> predictor VS residual\n","df_resid = pd.DataFrame({\n","    'predicted_value': y_predict_train,\n","    'residual': residual\n","})\n","\n","# residual plot\n","sns.scatterplot(data=df_resid, x=\"predicted_value\", y=\"residual\")\n","plt.axhline(0)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":280},"id":"2QWRctXacnZ1","executionInfo":{"status":"ok","timestamp":1677972447780,"user_tz":-420,"elapsed":513,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"1ada692f-9a6e-4067-f4f9-9dc8acc8dfa4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["Assumptions:\n","1. Linear relationship: The horizontal line y=0 does not over-represent all residual points. Because the residuals are closer to the centre only.\n","2. Variance stable: NO. The variation is close to the middle, but at the ends of the scatter plot there are quite a lot of residuals that widen, especially at the top of y> 0.\n","3. Independent residuals: OK. There is no noticeable pattern in nearby residuals."],"metadata":{"id":"viW2LxBfhLeI"}},{"cell_type":"markdown","source":["## Model Evaluation\n","\n","(Ridge)"],"metadata":{"id":"q8Bvfbd7hqZG"}},{"cell_type":"markdown","source":["### Training Error"],"metadata":{"id":"athIW53Sh8mp"}},{"cell_type":"code","source":["# prepare prediction result on train data\n","y_predict_train = ridge_best.predict(X_admit_train)"],"metadata":{"id":"aFPbyFuQgzkc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import mean_absolute_percentage_error\n","\n","print('RMSE for training data is {}'.format(np.sqrt(mean_squared_error(y_admit_train, y_predict_train))))\n","print('MAE for training data is {}'.format(mean_absolute_error(y_admit_train, y_predict_train)))\n","print('MAPE for training data is {}'.format(mean_absolute_percentage_error(y_admit_train, y_predict_train)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O9i5LhMkc36T","executionInfo":{"status":"ok","timestamp":1677972447788,"user_tz":-420,"elapsed":37,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"d3c0d593-2b8a-4f34-8ca9-7d401686845d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE for training data is 4.8028260197654715\n","MAE for training data is 3.3800448909187204\n","MAPE for training data is 0.1692525513485007\n"]}]},{"cell_type":"markdown","source":["** Training **\n","* RMSE: standard deviation of the residuals of 4.80\n","* MAE: on average, the predictions made deviated by 3.38%.\n","* MAPE: the average deviated by 16.92%."],"metadata":{"id":"kPh3QgZFj6NF"}},{"cell_type":"markdown","source":["### Testing Error"],"metadata":{"id":"Sgut9h5Zh_tQ"}},{"cell_type":"code","source":["# prepare prediction result on test data\n","X_admit_test = feature_boston_test.to_numpy()\n","y_predict_test = ridge_best.predict(X_admit_test)\n","\n","# ground truth target\n","y_admit_test = target_boston_test.to_numpy()\n","y_admit_test = y_admit_test.reshape(len(y_admit_test),)"],"metadata":{"id":"JhTpyaSTiFaW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import mean_absolute_percentage_error\n","\n","print('RMSE for testing data is {}'.format(np.sqrt(mean_squared_error(y_admit_test, y_predict_test))))\n","print('MAE for testing data is {}'.format(mean_absolute_error(y_admit_test, y_predict_test)))\n","print('MAPE for testing data is {}'.format(mean_absolute_percentage_error(y_admit_test, y_predict_test)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cF5lDe6piM0Z","executionInfo":{"status":"ok","timestamp":1677972447792,"user_tz":-420,"elapsed":32,"user":{"displayName":"Suci SRN","userId":"08038522749405006059"}},"outputId":"7dad3d40-182e-4aa0-e3de-bc54d00265f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE for testing data is 5.2179497752623485\n","MAE for testing data is 3.3016052648374403\n","MAPE for testing data is 0.18022752067268116\n"]}]},{"cell_type":"markdown","source":["** Testing **\n","* RSME: standard deviation of residuals of 5.21\n","* MAE: on average, the predictions made deviated by 3.30%.\n","* MAPE: the average deviation is 18.02%."],"metadata":{"id":"ssB1iUAskqUP"}},{"cell_type":"markdown","source":["* Interpretation*\n","\n","Based on the results of the Training and Testing error check above, this model can be said to be quite good with the MAPE value of both which is still below 20%.  So it can be concluded that this model is not underfitting or overfitting."],"metadata":{"id":"V7M_4SHHk5SL"}}]}